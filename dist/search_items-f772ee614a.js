searchNodes=[{"ref":"Rafty.html","title":"Rafty","type":"module","doc":"An implementation of the Raft consensus algorithm written in pure Elixir. For learning purposes only and not production use."},{"ref":"Rafty.html#execute/5","title":"Rafty.execute/5","type":"function","doc":"Executes a command that may modify the Raft state machine on the server with the specified id. If the server is not a leader, this function will return the leader of the server, possibly nil. Clients must specify the client id created by register() when calling execute(). If execute() times out, it will return the reference associated with the execute call. If a client wants to retry the command, they must supply this reference in subsequent retries. Additionally, if a client is retrying a command, they must not make any execute commands with different references or the command may be executed twice."},{"ref":"Rafty.html#leader/2","title":"Rafty.leader/2","type":"function","doc":"Returns the leader of the server with the specified id. If this function does not timeout, it will not return nil. If the server has no leader at the time of the call, it will wait until a leader has been elected before replying."},{"ref":"Rafty.html#query/3","title":"Rafty.query/3","type":"function","doc":"Executies a read-only query of the Raft state machine on the server with the specified id. If the server is not a leader, this function will return the leader of the server, possibly nil. Any query should not mutate the Raft state machine because it does not persist in the Raft log, so server failures may cause Raft state machine inconsistencies."},{"ref":"Rafty.html#register/2","title":"Rafty.register/2","type":"function","doc":"Registers a client on the server with the specified id. If the server is not a leader, this function will return the leader of the server, possibly nil. Clients must call register() before calling execute()."},{"ref":"Rafty.html#start_server/1","title":"Rafty.start_server/1","type":"function","doc":"Starts a new server on the current server with the specified arguments."},{"ref":"Rafty.html#status/2","title":"Rafty.status/2","type":"function","doc":"Returns a tuple {server_state, term_index, commit_index, last_applied} of the server with the specified id."},{"ref":"Rafty.html#terminate_server/1","title":"Rafty.terminate_server/1","type":"function","doc":"Terminates a server with the specified id."},{"ref":"Rafty.html#t:args/0","title":"Rafty.args/0","type":"type","doc":"The configuration of a server."},{"ref":"Rafty.html#t:catch_exit_error/0","title":"Rafty.catch_exit_error/0","type":"type","doc":"An error caught when a request exits."},{"ref":"Rafty.html#t:catch_exit_ref_error/0","title":"Rafty.catch_exit_ref_error/0","type":"type","doc":"An error caught when a request exits with the associated reference to the request."},{"ref":"Rafty.html#t:client_id/0","title":"Rafty.client_id/0","type":"type","doc":""},{"ref":"Rafty.html#t:id/0","title":"Rafty.id/0","type":"type","doc":"A tuple {server_name, node_name} that represents the unique id of a server."},{"ref":"Rafty.html#t:log_index/0","title":"Rafty.log_index/0","type":"type","doc":""},{"ref":"Rafty.html#t:node_name/0","title":"Rafty.node_name/0","type":"type","doc":"The name of a node."},{"ref":"Rafty.html#t:not_leader/0","title":"Rafty.not_leader/0","type":"type","doc":"An error returned when a server is not a leader. This error provides a hint to the leader, if any."},{"ref":"Rafty.html#t:opt_id/0","title":"Rafty.opt_id/0","type":"type","doc":"A possibly nil id of a server."},{"ref":"Rafty.html#t:rpc/0","title":"Rafty.rpc/0","type":"type","doc":""},{"ref":"Rafty.html#t:server_name/0","title":"Rafty.server_name/0","type":"type","doc":"The name of a server. Should be unique among all servers."},{"ref":"Rafty.html#t:server_state/0","title":"Rafty.server_state/0","type":"type","doc":"The state of server server. A server is either a follower, candidate, or a leader."},{"ref":"Rafty.html#t:term_index/0","title":"Rafty.term_index/0","type":"type","doc":""},{"ref":"Rafty.html#t:timestamp/0","title":"Rafty.timestamp/0","type":"type","doc":""},{"ref":"Rafty.FSM.html","title":"Rafty.FSM","type":"behaviour","doc":"A behavior that defines the finite state machine interface that the Raft protocol modifies and reads from."},{"ref":"Rafty.FSM.html#c:execute/2","title":"Rafty.FSM.execute/2","type":"callback","doc":"Executes a command that may modify the finite state machine with the specified state."},{"ref":"Rafty.FSM.html#c:init/0","title":"Rafty.FSM.init/0","type":"callback","doc":"Initializes a finite state machine."},{"ref":"Rafty.FSM.html#c:query/2","title":"Rafty.FSM.query/2","type":"callback","doc":"Executes a read-only query of the finite state machine with the specified state."},{"ref":"Rafty.FSM.html#t:state/0","title":"Rafty.FSM.state/0","type":"type","doc":"The state of the finite state machine."},{"ref":"Rafty.FSM.Server.html","title":"Rafty.FSM.Server","type":"module","doc":"A server that is the interface to the underlying Raft state machine."},{"ref":"Rafty.FSM.Server.html#child_spec/1","title":"Rafty.FSM.Server.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Rafty.FSM.Server.html#execute/5","title":"Rafty.FSM.Server.execute/5","type":"function","doc":"Executes a command on the Raft state machine."},{"ref":"Rafty.FSM.Server.html#name/1","title":"Rafty.FSM.Server.name/1","type":"function","doc":"Returns the name of the server."},{"ref":"Rafty.FSM.Server.html#query/2","title":"Rafty.FSM.Server.query/2","type":"function","doc":"Executes a read-only query on the Raft state machine."},{"ref":"Rafty.FSM.Server.html#register/3","title":"Rafty.FSM.Server.register/3","type":"function","doc":"Registers a new client to the Raft state machine at a specific index and timestamp."},{"ref":"Rafty.FSM.Server.html#start_link/1","title":"Rafty.FSM.Server.start_link/1","type":"function","doc":"Starts a Rafty.FSM.Server process linked to the current process."},{"ref":"Rafty.FSM.Server.html#t:t/0","title":"Rafty.FSM.Server.t/0","type":"type","doc":""},{"ref":"Rafty.Log.html","title":"Rafty.Log","type":"behaviour","doc":"A behavior that defines the log interface that the Raft protocol uses to persist data."},{"ref":"Rafty.Log.html#c:append_entries/3","title":"Rafty.Log.append_entries/3","type":"callback","doc":"Appends a list of entries in the log with the specified state."},{"ref":"Rafty.Log.html#c:close/1","title":"Rafty.Log.close/1","type":"callback","doc":"Closes the log with the specified state."},{"ref":"Rafty.Log.html#c:get_entries/2","title":"Rafty.Log.get_entries/2","type":"callback","doc":"Returns a list of entries in the log with the specified state."},{"ref":"Rafty.Log.html#c:get_entry/2","title":"Rafty.Log.get_entry/2","type":"callback","doc":"Returns an entry in the log with the specified state."},{"ref":"Rafty.Log.html#c:get_metadata/1","title":"Rafty.Log.get_metadata/1","type":"callback","doc":"Returns the metadata recorded in the log with the specified state."},{"ref":"Rafty.Log.html#c:init/1","title":"Rafty.Log.init/1","type":"callback","doc":"Initializes the log of the specified server."},{"ref":"Rafty.Log.html#c:length/1","title":"Rafty.Log.length/1","type":"callback","doc":"Returns the length of the log with the specified state."},{"ref":"Rafty.Log.html#merge_logs/2","title":"Rafty.Log.merge_logs/2","type":"function","doc":"Merges two lists of logs together. All entries after the first conflict are removed from old and replaced with the entries from new. If there are no conflicts, and new is missing entries, then this function is a no-op."},{"ref":"Rafty.Log.html#c:set_metadata/2","title":"Rafty.Log.set_metadata/2","type":"callback","doc":"Sets of the metadata in the log with the specified state."},{"ref":"Rafty.Log.html#t:state/0","title":"Rafty.Log.state/0","type":"type","doc":"The state of the log."},{"ref":"Rafty.Log.Entry.html","title":"Rafty.Log.Entry","type":"module","doc":"An entry of a Raft log."},{"ref":"Rafty.Log.Entry.html#t:t/0","title":"Rafty.Log.Entry.t/0","type":"type","doc":""},{"ref":"Rafty.Log.InMemoryStore.html","title":"Rafty.Log.InMemoryStore","type":"module","doc":"Implementation of Rafty.Log that stores the entries and metadata in-memory. This store should only be used for testing and might yield incorrect results if servers crash and lose data that must be persisted for correctness."},{"ref":"Rafty.Log.InMemoryStore.html#t:t/0","title":"Rafty.Log.InMemoryStore.t/0","type":"type","doc":""},{"ref":"Rafty.Log.Metadata.html","title":"Rafty.Log.Metadata","type":"module","doc":"Persisted metadata of a Raft log."},{"ref":"Rafty.Log.Metadata.html#t:t/0","title":"Rafty.Log.Metadata.t/0","type":"type","doc":""},{"ref":"Rafty.Log.RocksDBStore.html","title":"Rafty.Log.RocksDBStore","type":"module","doc":"Implementation of Rafty.Log that stores the entries and metadata in RocksDB."},{"ref":"Rafty.Log.RocksDBStore.html#t:t/0","title":"Rafty.Log.RocksDBStore.t/0","type":"type","doc":""},{"ref":"Rafty.Log.Server.html","title":"Rafty.Log.Server","type":"module","doc":"A server that is the interface to the underlying Raft log."},{"ref":"Rafty.Log.Server.html#append_entries/3","title":"Rafty.Log.Server.append_entries/3","type":"function","doc":"Appends a list of entries to index of the specified server&#39;s Raft log."},{"ref":"Rafty.Log.Server.html#child_spec/1","title":"Rafty.Log.Server.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Rafty.Log.Server.html#get_entries/2","title":"Rafty.Log.Server.get_entries/2","type":"function","doc":"Returns a list of entries from index to the end of the specified server&#39;s Raft log."},{"ref":"Rafty.Log.Server.html#get_entry/2","title":"Rafty.Log.Server.get_entry/2","type":"function","doc":"Returns the entry at index of the specified server&#39;s Raft log."},{"ref":"Rafty.Log.Server.html#get_term_index/1","title":"Rafty.Log.Server.get_term_index/1","type":"function","doc":"Returns the term of the specified server."},{"ref":"Rafty.Log.Server.html#get_voted_for/1","title":"Rafty.Log.Server.get_voted_for/1","type":"function","doc":"Returns the server that the specified server voted for, if any."},{"ref":"Rafty.Log.Server.html#increment_term_index/1","title":"Rafty.Log.Server.increment_term_index/1","type":"function","doc":"Increments the term of the specified server."},{"ref":"Rafty.Log.Server.html#length/1","title":"Rafty.Log.Server.length/1","type":"function","doc":"Returns the length of the specified server&#39;s Raft log."},{"ref":"Rafty.Log.Server.html#name/1","title":"Rafty.Log.Server.name/1","type":"function","doc":"Returns the name of the server."},{"ref":"Rafty.Log.Server.html#set_term_index/2","title":"Rafty.Log.Server.set_term_index/2","type":"function","doc":"Sets the term of the specified server to term_index."},{"ref":"Rafty.Log.Server.html#set_voted_for/2","title":"Rafty.Log.Server.set_voted_for/2","type":"function","doc":"Sets the server that the specified serverd voted for, if any."},{"ref":"Rafty.Log.Server.html#start_link/1","title":"Rafty.Log.Server.start_link/1","type":"function","doc":"Starts a Rafty.Log.Server process linked to the current process."},{"ref":"Rafty.Log.Server.html#stop/1","title":"Rafty.Log.Server.stop/1","type":"function","doc":"Stops a Rafty.Log.Server process."},{"ref":"Rafty.Log.Server.html#t:t/0","title":"Rafty.Log.Server.t/0","type":"type","doc":""},{"ref":"Rafty.RPC.html","title":"Rafty.RPC","type":"module","doc":"A module that handles sending and broadcasting remote procedure calls (RPCs) specified by the Rafty protocol."},{"ref":"Rafty.RPC.html#broadcast/2","title":"Rafty.RPC.broadcast/2","type":"function","doc":"Sends rpc to all servers specified in neighbours. Each rpc will have its to field set correspondingly."},{"ref":"Rafty.RPC.html#send_rpc/1","title":"Rafty.RPC.send_rpc/1","type":"function","doc":"Sends rpc to the server specified by rpc.to."},{"ref":"Rafty.RPC.AppendEntriesRequest.html","title":"Rafty.RPC.AppendEntriesRequest","type":"module","doc":"A request for appending entries to the Raft log."},{"ref":"Rafty.RPC.AppendEntriesRequest.html#t:t/0","title":"Rafty.RPC.AppendEntriesRequest.t/0","type":"type","doc":""},{"ref":"Rafty.RPC.AppendEntriesResponse.html","title":"Rafty.RPC.AppendEntriesResponse","type":"module","doc":"A response to Rafty.RPC.AppendEntriesRequest."},{"ref":"Rafty.RPC.AppendEntriesResponse.html#t:t/0","title":"Rafty.RPC.AppendEntriesResponse.t/0","type":"type","doc":""},{"ref":"Rafty.RPC.RequestVoteRequest.html","title":"Rafty.RPC.RequestVoteRequest","type":"module","doc":"A request for a vote in a Raft election."},{"ref":"Rafty.RPC.RequestVoteRequest.html#t:t/0","title":"Rafty.RPC.RequestVoteRequest.t/0","type":"type","doc":""},{"ref":"Rafty.RPC.RequestVoteResponse.html","title":"Rafty.RPC.RequestVoteResponse","type":"module","doc":"A response to Rafty.RPC.RequestVoteRequest."},{"ref":"Rafty.RPC.RequestVoteResponse.html#t:t/0","title":"Rafty.RPC.RequestVoteResponse.t/0","type":"type","doc":""},{"ref":"Rafty.Server.html","title":"Rafty.Server","type":"module","doc":"A server that implements the Raft consensus protocol."},{"ref":"Rafty.Server.html#child_spec/1","title":"Rafty.Server.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Rafty.Server.html#start_link/1","title":"Rafty.Server.start_link/1","type":"function","doc":"Starts a Rafty.Server process linked to the current process."},{"ref":"Rafty.Server.html#t:t/0","title":"Rafty.Server.t/0","type":"type","doc":""},{"ref":"Rafty.Server.ClientRequest.html","title":"Rafty.Server.ClientRequest","type":"module","doc":"Rafty.Server.ClientRequest is a request from a client to a Raft group."},{"ref":"Rafty.Server.ClientRequest.html#t:t/0","title":"Rafty.Server.ClientRequest.t/0","type":"type","doc":""},{"ref":"Rafty.Server.Supervisor.html","title":"Rafty.Server.Supervisor","type":"module","doc":"Supervisor for a server. It starts a Rafty.Log.Server, Rafty.FSM.Server, and a Rafty.Server."},{"ref":"Rafty.Server.Supervisor.html#child_spec/1","title":"Rafty.Server.Supervisor.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Rafty.Server.Supervisor.html#name/1","title":"Rafty.Server.Supervisor.name/1","type":"function","doc":"Returns the name of the supervisor."},{"ref":"Rafty.Server.Supervisor.html#start_link/1","title":"Rafty.Server.Supervisor.start_link/1","type":"function","doc":"Starts a Rafty.Server.Supervisor process linked to the current process."},{"ref":"Rafty.ServersSupervisor.html","title":"Rafty.ServersSupervisor","type":"module","doc":"Dynamic supervisor that supervises Rafty.Server.Supervisor."},{"ref":"Rafty.ServersSupervisor.html#child_spec/1","title":"Rafty.ServersSupervisor.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Rafty.ServersSupervisor.html#start_link/1","title":"Rafty.ServersSupervisor.start_link/1","type":"function","doc":"Starts a Rafty.ServersSupervisor process linked to the current process."},{"ref":"Rafty.ServersSupervisor.html#start_server/1","title":"Rafty.ServersSupervisor.start_server/1","type":"function","doc":"Starts a new server on the current node with the specified arguments."},{"ref":"Rafty.ServersSupervisor.html#terminate_server/1","title":"Rafty.ServersSupervisor.terminate_server/1","type":"function","doc":"Terminates a server with the specified id."},{"ref":"Rafty.Supervisor.html","title":"Rafty.Supervisor","type":"module","doc":"Supervisor for the Rafty application. It starts Rafty.RPC.Supervisor and Rafty.ServersSupervisor."},{"ref":"Rafty.Supervisor.html#child_spec/1","title":"Rafty.Supervisor.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Rafty.Supervisor.html#start_link/0","title":"Rafty.Supervisor.start_link/0","type":"function","doc":"Starts a Rafty.Supervisor process linked to the current process."},{"ref":"Rafty.Timer.html","title":"Rafty.Timer","type":"module","doc":"A general-purpose timer that will send a message to self() after a specified duration has elapsed."},{"ref":"Rafty.Timer.html#new/1","title":"Rafty.Timer.new/1","type":"function","doc":"Creates a new, unset timer that sends command to self() after a specified duration has elapsed."},{"ref":"Rafty.Timer.html#reset/2","title":"Rafty.Timer.reset/2","type":"function","doc":"Resets the timer with a new timeout. The old timeout may still trigger a message, so you must check that the reference sent in the message is ref stored in the timer. If the references don&#39;t match, then the message must be ignored."},{"ref":"Rafty.Timer.html#stop/1","title":"Rafty.Timer.stop/1","type":"function","doc":"Stops the timer. The old timeout may still trigger a message, so you must check that the reference sent in the message is ref stored in the timer. If the references don&#39;t match, then the message must be ignored."},{"ref":"Rafty.Timer.html#t:t/0","title":"Rafty.Timer.t/0","type":"type","doc":""},{"ref":"readme.html","title":"rafty_ex","type":"extras","doc":"rafty_ex An implementation of the Raft consensus algorithm written in pure Elixir. For learning purposes only and not production use."},{"ref":"readme.html#references","title":"rafty_ex - References","type":"extras","doc":"In Search of an Understandable Consensus Algorithm &gt; Ongaro, Diego, and John Ousterhout. 2014. “In Search of an Understandable Consensus Algorithm.” In 2014 Usenix Annual Technical Conference (Usenix Atc 14), 305–19 Consensus: Bridging Theory and Practice &gt; Ongaro, Diego. 2014. “Consensus: Bridging Theory and Practice.” PhD thesis, Stanford University."},{"ref":"readme.html#license","title":"rafty_ex - License","type":"extras","doc":"rafty_ex is dual-licensed under the terms of either the MIT License or the Apache License (Version 2.0). See LICENSE-APACHE and LICENSE-MIT for more details."}]